// Prisma schema for PriceCalc backend

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  servicios    Servicio[]
  transacciones Transaccion[]
  calculationLogs CalculationLog[]
  cotizacionesSeleccionadas String? // <-- Nuevo campo (puedes usar JSON.stringify)
}

model Servicio {
  id           Int       @id @default(autoincrement())
  nombre       String
  monto        Decimal
  vencimiento  DateTime
  periodicidad String    // 'unico' | 'mensual'
  estado       String    @default("por_pagar") // 'por_pagar' | 'pagado' | 'vencido'
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  pagos        Pago[]
  createdAt    DateTime  @default(now())
  // Nuevos campos
  linkPago     String?
  categoria    String   @default("Otros")
}

model Pago {
  id          Int       @id @default(autoincrement())
  servicioId  Int
  servicio    Servicio  @relation(fields: [servicioId], references: [id])
  fechaPago   DateTime
  montoPagado Decimal
  createdAt   DateTime  @default(now())
}

model Transaccion {
  id           Int      @id @default(autoincrement())
  tipo         String   // 'ingreso' | 'gasto'
  monto        Decimal
  descripcion  String
  categoria    String   // 'Servicios' | 'Hogar' | 'Impuestos' | 'Salud' | 'Educacion'
  fecha        DateTime
  periodicidad String   // 'unico' | 'mensual'
  esRecurrente Boolean  @default(false) // Para identificar transacciones generadas automáticamente
  transaccionPadreId Int? // ID de la transacción original (para transacciones recurrentes)
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Modelos para Calculadora de Impuestos

model Rate {
  id        Int      @id @default(autoincrement())
  tipo      String   // 'oficial', 'blue', 'tarjeta', 'mep', 'ccl', 'cripto'
  compra    Decimal?
  venta     Decimal
  source    String   // 'dolarapi.com', 'bcra', 'dolarito'
  fetchedAt DateTime
  createdAt DateTime @default(now())
  
  @@index([tipo, fetchedAt])
}

model TaxRule {
  id           Int      @id @default(autoincrement())
  name         String
  tipoEnum     String   // 'IVA', 'PAIS', 'PERCEPCION_GAN', 'IIBB'
  valuePct     Decimal  // Porcentaje (ej: 21.0 para 21%)
  scope        String   // 'global' | 'provincia'
  provinceCode String?  // Código de provincia (ej: 'CABA', 'TDF')
  active       Boolean  @default(true)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  
  @@index([tipoEnum, active])
  @@index([provinceCode, active])
}

model CalculationLog {
  id               Int      @id @default(autoincrement())
  userId           Int?     // Nullable para permitir cálculos anónimos
  user             User?    @relation(fields: [userId], references: [id])
  inputJson        String   // JSON del input del usuario
  outputJson       String   // JSON del resultado del cálculo
  ratesSnapshotJson String  // JSON de las cotizaciones usadas
  createdAt        DateTime @default(now())
  
  @@index([userId, createdAt])
}

